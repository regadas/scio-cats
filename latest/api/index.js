Index.PACKAGES = {"io.regadas.scio.cats" : [], "io.regadas.scio.cats.syntax" : [{"name" : "io.regadas.scio.cats.syntax.SCollectionNestedOps", "shortDescription" : "com.spotify.scio.values.SCollection functions that operate over F[G[_]] types.", "members_class" : [{"label" : "sequence", "tail" : "(T: Traverse[F], G: Applicative[G], coder: Coder[G[F[A]]]): SCollection[G[F[A]]]", "member" : "io.regadas.scio.cats.syntax.SCollectionNestedOps.sequence", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionNestedOps.html#sequence(implicitT:cats.Traverse[F],implicitG:cats.Applicative[G],implicitcoder:com.spotify.scio.coders.Coder[G[F[A]]]):com.spotify.scio.values.SCollection[G[F[A]]]", "kind" : "def"}, {"label" : "map_", "tail" : "(f: (A) ⇒ B)(N: Functor[[γ$0$]Nested[F, G, γ$0$]], coder: Coder[F[G[B]]]): SCollection[F[G[B]]]", "member" : "io.regadas.scio.cats.syntax.SCollectionNestedOps.map_", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionNestedOps.html#map_[B](f:A=>B)(implicitN:cats.Functor[[γ$0$]cats.data.Nested[F,G,γ$0$]],implicitcoder:com.spotify.scio.coders.Coder[F[G[B]]]):com.spotify.scio.values.SCollection[F[G[B]]]", "kind" : "def"}, {"member" : "io.regadas.scio.cats.syntax.SCollectionNestedOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionNestedOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionNestedOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionNestedOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionNestedOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionNestedOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionNestedOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionNestedOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "io\/regadas\/scio\/cats\/syntax\/SCollectionNestedOps.html", "kind" : "class"}, {"name" : "io.regadas.scio.cats.syntax.SCollectionOps", "shortDescription" : "com.spotify.scio.values.SCollection functions that operate over F[_] types.", "members_class" : [{"label" : "showStdOut", "tail" : "(S: Show[F[A]]): SCollection[F[A]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.showStdOut", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#showStdOut(implicitS:cats.Show[F[A]]):com.spotify.scio.values.SCollection[F[A]]", "kind" : "def"}, {"label" : "show", "tail" : "(out: PrintStream)(S: Show[F[A]]): SCollection[F[A]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.show", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#show(out:java.io.PrintStream)(implicitS:cats.Show[F[A]]):com.spotify.scio.values.SCollection[F[A]]", "kind" : "def"}, {"label" : "combine_", "tail" : "(M: CommutativeMonoid[F[A]], C: Coder[F[A]]): SCollection[F[A]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.combine_", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#combine_(implicitM:cats.kernel.CommutativeMonoid[F[A]],implicitC:com.spotify.scio.coders.Coder[F[A]]):com.spotify.scio.values.SCollection[F[A]]", "kind" : "def"}, {"label" : "foldF", "tail" : "(F: Foldable[F], M: CommutativeMonoid[A], c: Coder[A]): SCollection[A]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.foldF", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#foldF(implicitF:cats.Foldable[F],implicitM:cats.kernel.CommutativeMonoid[A],implicitc:com.spotify.scio.coders.Coder[A]):com.spotify.scio.values.SCollection[A]", "kind" : "def"}, {"label" : "flatTraverse", "tail" : "(f: (A) ⇒ G[F[B]])(T: Traverse[F], F: FlatMap[F], G: Applicative[G], coder: Coder[G[F[B]]]): SCollection[G[F[B]]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.flatTraverse", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#flatTraverse[G[_],B](f:A=>G[F[B]])(implicitT:cats.Traverse[F],implicitF:cats.FlatMap[F],implicitG:cats.Applicative[G],implicitcoder:com.spotify.scio.coders.Coder[G[F[B]]]):com.spotify.scio.values.SCollection[G[F[B]]]", "kind" : "def"}, {"label" : "traverse", "tail" : "(f: (A) ⇒ G[B])(arg0: Applicative[G], T: Traverse[F], coder: Coder[G[F[B]]]): SCollection[G[F[B]]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.traverse", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#traverse[G[_],B](f:A=>G[B])(implicitevidence$1:cats.Applicative[G],implicitT:cats.Traverse[F],implicitcoder:com.spotify.scio.coders.Coder[G[F[B]]]):com.spotify.scio.values.SCollection[G[F[B]]]", "kind" : "def"}, {"label" : "maxOption", "tail" : "(F: Foldable[F], o: Order[A], c: Coder[Option[A]]): SCollection[Option[A]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.maxOption", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#maxOption(implicitF:cats.Foldable[F],implicito:cats.kernel.Order[A],implicitc:com.spotify.scio.coders.Coder[Option[A]]):com.spotify.scio.values.SCollection[Option[A]]", "kind" : "def"}, {"label" : "minOption", "tail" : "(F: Foldable[F], o: Order[A], c: Coder[Option[A]]): SCollection[Option[A]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.minOption", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#minOption(implicitF:cats.Foldable[F],implicito:cats.kernel.Order[A],implicitc:com.spotify.scio.coders.Coder[Option[A]]):com.spotify.scio.values.SCollection[Option[A]]", "kind" : "def"}, {"label" : "filter_", "tail" : "(p: (A) ⇒ Boolean)(F: FunctorFilter[F], FF: Foldable[F], c: Coder[F[A]]): SCollection[F[A]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.filter_", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#filter_(p:A=>Boolean)(implicitF:cats.FunctorFilter[F],implicitFF:cats.Foldable[F],implicitc:com.spotify.scio.coders.Coder[F[A]]):com.spotify.scio.values.SCollection[F[A]]", "kind" : "def"}, {"label" : "empty", "tail" : "(FF: Foldable[F]): SCollection[F[A]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.empty", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#empty(implicitFF:cats.Foldable[F]):com.spotify.scio.values.SCollection[F[A]]", "kind" : "def"}, {"label" : "empty", "tail" : "(p: (A) ⇒ Boolean)(F: FunctorFilter[F], FF: Foldable[F], c: Coder[F[A]]): SCollection[F[A]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.empty", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#empty(p:A=>Boolean)(implicitF:cats.FunctorFilter[F],implicitFF:cats.Foldable[F],implicitc:com.spotify.scio.coders.Coder[F[A]]):com.spotify.scio.values.SCollection[F[A]]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(FF: Foldable[F]): SCollection[F[A]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.nonEmpty", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#nonEmpty(implicitFF:cats.Foldable[F]):com.spotify.scio.values.SCollection[F[A]]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(p: (A) ⇒ Boolean)(F: FunctorFilter[F], FF: Foldable[F], c: Coder[F[A]]): SCollection[F[A]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.nonEmpty", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#nonEmpty(p:A=>Boolean)(implicitF:cats.FunctorFilter[F],implicitFF:cats.Foldable[F],implicitc:com.spotify.scio.coders.Coder[F[A]]):com.spotify.scio.values.SCollection[F[A]]", "kind" : "def"}, {"label" : "ffilter", "tail" : "(p: (A) ⇒ Boolean)(F: FunctorFilter[F], c: Coder[F[A]]): SCollection[F[A]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.ffilter", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#ffilter(p:A=>Boolean)(implicitF:cats.FunctorFilter[F],implicitc:com.spotify.scio.coders.Coder[F[A]]):com.spotify.scio.values.SCollection[F[A]]", "kind" : "def"}, {"label" : "flatten_", "tail" : "(FF: Foldable[F], c: Coder[A]): SCollection[A]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.flatten_", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#flatten_(implicitFF:cats.Foldable[F],implicitc:com.spotify.scio.coders.Coder[A]):com.spotify.scio.values.SCollection[A]", "kind" : "def"}, {"label" : "collect_", "tail" : "(f: PartialFunction[A, B])(F: FunctorFilter[F], coder: Coder[F[B]]): SCollection[F[B]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.collect_", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#collect_[B](f:PartialFunction[A,B])(implicitF:cats.FunctorFilter[F],implicitcoder:com.spotify.scio.coders.Coder[F[B]]):com.spotify.scio.values.SCollection[F[B]]", "kind" : "def"}, {"label" : "mapFilter", "tail" : "(f: (A) ⇒ Option[B])(F: FunctorFilter[F], coder: Coder[F[B]]): SCollection[F[B]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.mapFilter", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#mapFilter[B](f:A=>Option[B])(implicitF:cats.FunctorFilter[F],implicitcoder:com.spotify.scio.coders.Coder[F[B]]):com.spotify.scio.values.SCollection[F[B]]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(f: (A) ⇒ F[B])(F: FlatMap[F], coder: Coder[F[(A, B)]]): SCollection[F[(A, B)]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.mproduct", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#mproduct[B](f:A=>F[B])(implicitF:cats.FlatMap[F],implicitcoder:com.spotify.scio.coders.Coder[F[(A,B)]]):com.spotify.scio.values.SCollection[F[(A,B)]]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(f: (A) ⇒ B)(F: Functor[F], coder: Coder[F[(A, B)]]): SCollection[F[(A, B)]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.fproduct", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#fproduct[B](f:A=>B)(implicitF:cats.Functor[F],implicitcoder:com.spotify.scio.coders.Coder[F[(A,B)]]):com.spotify.scio.values.SCollection[F[(A,B)]]", "kind" : "def"}, {"label" : "flatMap_", "tail" : "(f: (A) ⇒ F[B])(F: FlatMap[F], coder: Coder[F[B]]): SCollection[F[B]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.flatMap_", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#flatMap_[B](f:A=>F[B])(implicitF:cats.FlatMap[F],implicitcoder:com.spotify.scio.coders.Coder[F[B]]):com.spotify.scio.values.SCollection[F[B]]", "kind" : "def"}, {"label" : "map_", "tail" : "(f: (A) ⇒ B)(F: Functor[F], coder: Coder[F[B]]): SCollection[F[B]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.map_", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#map_[B](f:A=>B)(implicitF:cats.Functor[F],implicitcoder:com.spotify.scio.coders.Coder[F[B]]):com.spotify.scio.values.SCollection[F[B]]", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(b: B)(F: Functor[F], coder: Coder[F[(A, B)]]): SCollection[F[(A, B)]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.tupleRight", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#tupleRight[B](b:B)(implicitF:cats.Functor[F],implicitcoder:com.spotify.scio.coders.Coder[F[(A,B)]]):com.spotify.scio.values.SCollection[F[(A,B)]]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(b: B)(F: Functor[F], coder: Coder[F[(B, A)]]): SCollection[F[(B, A)]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.tupleLeft", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#tupleLeft[B](b:B)(implicitF:cats.Functor[F],implicitcoder:com.spotify.scio.coders.Coder[F[(B,A)]]):com.spotify.scio.values.SCollection[F[(B,A)]]", "kind" : "def"}, {"label" : "as", "tail" : "(b: B)(F: Functor[F], coder: Coder[F[B]]): SCollection[F[B]]", "member" : "io.regadas.scio.cats.syntax.SCollectionOps.as", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#as[B](b:B)(implicitF:cats.Functor[F],implicitcoder:com.spotify.scio.coders.Coder[F[B]]):com.spotify.scio.values.SCollection[F[B]]", "kind" : "def"}, {"member" : "io.regadas.scio.cats.syntax.SCollectionOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "io\/regadas\/scio\/cats\/syntax\/SCollectionOps.html", "kind" : "class"}, {"name" : "io.regadas.scio.cats.syntax.SCollectionSyntax", "members_trait" : [{"label" : "scollectionNestedOps", "tail" : "(s: SCollection[F[G[A]]]): SCollectionNestedOps[F, G, A]", "member" : "io.regadas.scio.cats.syntax.SCollectionSyntax.scollectionNestedOps", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#scollectionNestedOps[F[_],G[_],A](s:com.spotify.scio.values.SCollection[F[G[A]]]):io.regadas.scio.cats.syntax.SCollectionNestedOps[F,G,A]", "kind" : "implicit def"}, {"label" : "scollectionOps", "tail" : "(s: SCollection[F[A]]): SCollectionOps[F, A]", "member" : "io.regadas.scio.cats.syntax.SCollectionSyntax.scollectionOps", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#scollectionOps[F[_],A](s:com.spotify.scio.values.SCollection[F[A]]):io.regadas.scio.cats.syntax.SCollectionOps[F,A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "io\/regadas\/scio\/cats\/syntax\/SCollectionSyntax.html", "kind" : "trait"}], "io" : [], "io.regadas.scio" : [], "io.regadas" : []};